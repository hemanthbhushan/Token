// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.11;


// interface 

contract TokenContract{
    address public owner;
   


   
    mapping(address => bool) internal frozen;
   mapping(address => bool) internal blankList;

     modifier onlyAdmin() {
        require(msg.sender == owner, "onlyAdmin");
        _;
    }

 

    event AddressFrozen(address indexed addr);
    event AddressUnfrozen(address indexed addr);
    event blankListed(address[] indexed addr);
    event removeBlankListed(address[] indexed addr);
    
    

    constructor(){
         owner = msg.sender;
    }




     function freeze(address _addr) public onlyAdmin {
        require(!frozen[_addr], "address already frozen");
        frozen[_addr] = true;
        emit AddressFrozen(_addr);
    }

    function unfreeze(address _addr) public  {
        require(frozen[_addr], "address already unfrozen");
        frozen[_addr] = false;
        emit AddressUnfrozen(_addr);
    }

    function addBlankList(address[] memory _blankList) public onlyAdmin{

        for(uint i = 0; i<_blankList.length;i++){

            blankList[_blankList[i]] = true;

        }
        emit blankListed(_blankList);



    }

     function removeBlankList(address[] memory _removeBlankList) public onlyAdmin{

        for(uint i = 0; i<_removeBlankList.length;i++){

            blankList[_removeBlankList[i]] = false;

        }
        emit removeBlankListed(_removeBlankList);



    }




}
